function [sequence, total_time] = solve_milp(tubes)
    % Definisci il numero di job (tubi)
    n = size(tubes, 1);

    % Tempi di elaborazione per i job
    a = tubes(:, 2); % Tempi di saldatura
    b = tubes(:, 3); % Tempi di cottura

    % Variabili MILP
    x = optimvar('x', n, n, 'Type', 'integer', 'LowerBound', 0, 'UpperBound', 1); % Job sequence positions
    s_w = optimvar('s_w', n, 'Type', 'continuous', 'LowerBound', 0); % Welding start times
    e_w = optimvar('e_w', n, 'Type', 'continuous', 'LowerBound', 0); % Welding end times
    s_o = optimvar('s_o', n, 'Type', 'continuous', 'LowerBound', 0); % Oven start times
    e_o = optimvar('e_o', n, 'Type', 'continuous', 'LowerBound', 0); % Oven end times
    total_time_var = optimvar('total_time', 'Type', 'continuous', 'LowerBound', 0); % Total time

    % Variabili per simulare max(e_o) e min(s_w)
    max_e_o = optimvar('max_e_o', 'Type', 'continuous', 'LowerBound', 0);
    min_s_w = optimvar('min_s_w', 'Type', 'continuous', 'LowerBound', 0);

    % Obiettivo: Minimizzare il tempo totale
    obj = total_time_var;

    % Vincoli
    eq_constraints = optimconstr; % Job assegnati alle posizioni + posizioni assegnate ai job
    prec_constraints = optimconstr; % Vincoli di precedenza
    after_constraints = optimconstr; % Vincoli di sequenza

    % Vincoli di non sovrapposizione per la macchina di welding
    M = 1000; % Un numero grande
    for i = 1:n
        for j = 1:n
            if i ~= j
                prec_constraints = [prec_constraints;
                    s_w(i) + a(i) <= s_w(j) + M * (1 - x(i,j))];
            end
        end
    end

    % Vincoli di non sovrapposizione per la macchina di oven
    for i = 1:n
        for j = 1:n
            if i ~= j
                prec_constraints = [prec_constraints;
                    s_o(i) + b(i) <= s_o(j) + M * (1 - x(i,j))];
            end
        end
    end

    % Vincoli di sequenza tra macchine
    % l'end time welding dev'essere uguale a start time welding + welding time
    for i = 1:n
        eq_constraints = [eq_constraints;
            e_w(i) == s_w(i) + a(i)];
        after_constraints = [after_constraints;
            s_o(i) >= e_w(i)];
    end

    % Vincoli sul tempo totale
    for i = 1:n
        after_constraints = [after_constraints;
            total_time_var >= e_o(i)];
    end

    % Vincoli di fine per le macchine
    for i = 1:n
        eq_constraints = [eq_constraints;
            e_o(i) == s_o(i) + b(i)];
    end

    % Vincoli di unicità delle posizioni nella sequenza
     for i = 1:n
       prec_constraints = [prec_constraints;
            sum(x(i,:)) <= 1;
            sum(x(:,i)) <= 1];
     end

     for i = 1:n
         for j = 1:n
             if i == j
                 eq_constraints = [eq_constraints;
                     x(i,j) == 0];
             end
         end
     end
        
     eq_constraints = [eq_constraints;
              sum(x(:)) == n-1]; 

    % Vincoli per simulare max(e_o)
    for i = 1:n
        after_constraints = [after_constraints;
            max_e_o >= e_o(i)];
    end

    % Vincoli per simulare min(s_w)
    for i = 1:n
        prec_constraints = [prec_constraints;
            min_s_w <= s_w(i)];
    end

    % Vincolo per calcolare il total time come differenza tra il primo welding start e l'ultimo oven end
    eq_constraints = [eq_constraints;
        total_time_var == max_e_o];

    % Welding constraints: Ensure only one welding job at a time
    % for i = 1:(n - 1)
    %    prec_constraints = [prec_constraints; s_w(i) + a(i) <= s_w(i + 1)];
    % end

    % for i = 1:(n - 1)
    %    prec_constraints = [prec_constraints; s_o(i) + b(i) <= s_o(i + 1)];
    % end

    % Crea il problema di ottimizzazione
    prob = optimproblem('Objective', obj, 'Constraints', struct('eq', eq_constraints, 'prec', prec_constraints, 'after', after_constraints));

    show(prob)

    % Risolvi il problema MILP
    options = optimoptions('intlinprog', 'Display', 'off');
    [sol, fval, exitflag, output] = solve(prob, 'Options', options);

    % Verifica se la soluzione è stata trovata
    % if exitflag <= 0
    %    error('La soluzione del problema MILP non è stata trovata.');
    % end

    % Estrai la sequenza dei job dalla soluzione
    sequence = zeros(n, 1);
    for j = 1:n
        if sum(sol.x(:,j)) ==0
            sequence(1)=j;
        end
    end
    for place = 2:n
        for i = 1:n
            c = sequence(place - 1);
            if sol.x(c,i)==1
                sequence(place)=i;
            end
        end
    end


    % Calcola il tempo totale come la differenza tra il tempo di inizio del primo job
    % sulla macchina di saldatura e il tempo di fine dell'ultimo job sulla macchina di cottura
    total_time = fval;

    % Stampa i valori delle variabili di ottimizzazione per il debug
    disp('Valori delle variabili di ottimizzazione risolte:');
    disp('Welding start times (s_w):');
    disp(sol.s_w);
    disp('Welding end times (e_w):');
    disp(sol.e_w);
    disp('Oven start times (s_o):');
    disp(sol.s_o);
    disp('Oven end times (e_o):');
    disp(sol.e_o);
    disp('Total time:');
    disp(total_time);
    disp('x: ');
    disp(sol.x);
end